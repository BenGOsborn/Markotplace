version: "3"

services:
    # --------- Backend services ---------
    api:
        build:
            context: ../src/api
            dockerfile: build.Dockerfile
        ports:
            - "4000"
        environment:
            - POSTGRES_HOST=${POSTGRES_HOST}
            - POSTGRES_PORT=${POSTGRES_PORT}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_DB=${POSTGRES_DB}
            - REDIS_HOST=${REDIS_HOST}
            - REDIS_PORT=${REDIS_PORT}
            - REDIS_PASSWORD=${REDIS_PASSWORD}
            - SERVER_SECRET=${SERVER_SECRET}
            - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
            - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
            - STRIPE_SECRET=${STRIPE_SECRET}
            - STRIPE_WEBOOK_SIGNING_SECRET_PURCHASE=${STRIPE_WEBOOK_SIGNING_SECRET_PURCHASE}
            - FRONTEND_HOSTNAME=${FRONTEND_URL}
            - BACKEND_HOSTNAME=${BACKEND_HOSTNAME}
            - NODE_ENV=${NODE_ENV}
        restart: always
        networks:
            - backend
    apphandler:
        build:
            context: ../src/apphandler
            dockerfile: build.Dockerfile
        ports:
            - "5000"
        environment:
            - POSTGRES_HOST=${POSTGRES_HOST}
            - POSTGRES_PORT=${POSTGRES_PORT}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_DB=${POSTGRES_DB}
            - BACKEND_HOSTNAME=${BACKEND_HOSTNAME}
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - /usr/bin/docker:/usr/bin/docker
        restart: always
        networks:
            - backend
    nginx_backend:
        build:
            context: ../src/nginx_backend
        command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''
        ports:
            - "8000:80"
        environment:
            - BACKEND_HOSTNAME=${BACKEND_HOSTNAME}
        depends_on:
            - api
            - apphandler
            - certbot
        volumes:
            - ../data/certbot/conf:/etc/letsencrypt
            - ../data/certbot/www:/var/www/certbot
        restart: always
        networks:
            - backend
    # --------- Frontend services ---------
    frontend:
        build:
            context: ../src/frontend
            dockerfile: build.Dockerfile
        ports:
            - "3000"
        restart: always
        environment:
            - BACKEND_HOSTNAME=${BACKEND_HOSTNAME}
            - NODE_ENV=${NODE_ENV}
        networks:
            - frontend
    nginx_frontend:
        build:
            context: ../src/nginx_frontend
        command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''
        depends_on:
            - frontend
            - certbot
        volumes:
            - ../data/certbot/conf:/etc/letsencrypt
            - ../data/certbot/www:/var/www/certbot
        ports:
            - "80:80"
        environment:
            - FRONTEND_HOSTNAME=${FRONTEND_HOSTNAME}
        restart: always
        networks:
            - frontend
    # --------- Misc services ---------
    certbot:
        image: certbot/certbot:latest
        volumes:
            - ../data/certbot/conf:/etc/letsencrypt
            - ../data/certbot/www:/var/www/certbot
        entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

networks:
    backend:
    frontend:
